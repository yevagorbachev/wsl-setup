global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
    return x != '0' and x != '0'
endglobal

# [[[ ENVIRONMENTS

snippet '\\begin{(\w+\*?)}' "begin/end" r
\begin{`!p snip.rv = match.group(1)`}
	$0
\end{`!p snip.rv = match.group(1)`}
endsnippet

snippet FIG "figure"
\begin{figure}
	\centering
	${3:body}
	\caption{$1}
	\label{fig:$2}
\end{figure}
$0
endsnippet

snippet SUB "subfigure" 
\begin{subfigure}{${1:0.45\textwidth}}
	% requires \usepackage{subcaption}
	\includegraphics[${2:dimension}]{${3:path}}
	\caption{$4}
	\label{fig:$5}
\end{subfigure}
$0
endsnippet

snippet TAB "table" 
\begin{table}
	\centering
	${3:body}
	\caption{$1}
	\label{tbl:$2}
\end{table}$0
endsnippet

snippet ULAR "tabular" 
\begin{tabular}{${1:colspec}}
	\hline $2 \\\\
	\hline
\end{tabular}$0
endsnippet

# [[[ MATH FORMATTING

# captures single chars or commands into a hat
context "math()"
priority 2
snippet '(\\\w+|\w)(dot|vec|hat)' "suffixes basic" wr
`!p snip.rv = f"\\{match.group(2)}{{{match.group(1)}}}"`$0
endsnippet

# captures commands with arguments (other hats) into a hat
context "math()"
priority 1
snippet '^(.+)(dot|vec|hat)$' "suffixes advanced" wr
`!p
depth = 0
first = match.group(1)
i = len(first) - 1
while i: # match delimeter groups
	if first[i] in "}])":
		depth += 1
	elif first[i] in "{[(":
		depth -= 1
	if depth <= 0:
		break
	i -= 1
# i now is at the position of the matched open delimeter closest to the end
arg_re = re.compile(r"^(.*?)(\\\w+)") # match "(stuff)\(command)"
sm = arg_re.match(first[:i])
if not sm: # the string doesn't exactly match "\command{arguments}", do nothing.
	snip.rv = match.string # do nothing, just to be safe
else:
	snip.rv = f"{sm.group(1)}\\{match.group(2)}{{{sm.group(2)}{first[i:]}}}"
`$0
endsnippet

# automatic super or subscript
context "math()"
snippet '(\^|_)(\\?[\-a-zA-Z0-9])' "Script" wirA
`!p snip.rv = match.group(1)`{`!p snip.rv = match.group(2)`$1}$0
endsnippet

# uses \9 because it's slightly faster and less accident-prone due to A
snippet \9 "Inline equation" iA
\($1\)$0
endsnippet

snippet \[ "Aligned unlabeled equation" i
\[$1\]$0
endsnippet

# [[[ OPERATIONS

# automatically creates fraction numerator, obeys delim groups
context "math()"
snippet '(^.*)//' "Fraction" wrA
`!p
argument = match.group(1)
i = len(argument) - 1
depth = 0
while i:
	if argument[i] in "}])":
		depth += 1
	elif argument[i] in "{[(":
		depth -= 1
	if depth < 0 or (depth == 0 and argument[i] in ' =\t'):
		break
	i -= 1
 
snip.rv = argument[:i+1] + '\\frac{' + argument[i+1:]`$1}{$2}$0
endsnippet

# shortcut for integral
context "math()"
snippet int "Integral" i
\int_{$1}$2\dd{$3}$0
endsnippet

# shortcut for differentor operators
context "math()"
snippet '\\(p?dt)' "diff operator" ir
\\`!p snip.rv = match.group(1)`{$1}$0
endsnippet

# shortcut for derivatives
context "math()"
snippet '\\(p?dv)' "derivative" ir
\\`!p snip.rv = match.group(1)`{$1}{$2}$0
endsnippet

# shortcut for second partial derivatives
context "math()"
snippet \pddv "second derivative" i
\pddv{$1}{$2}{$3}$0
endsnippet
