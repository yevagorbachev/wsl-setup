global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS',
'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS',
'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC',
'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES',
'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
			i for i in reversed(synstackids)
			if i in texIgnoreMathZoneIds or i in texMathZoneIds	
		)
		return first != ignore
	except StopIteration:
		return False
endglobal

# TEXT FORMATTING

snippet '\\begin{(\w+)}' "begin/end" r
\begin{`!p snip.rv = match.group(1)`}
	$0
\end{`!p snip.rv = match.group(1)`}
endsnippet

snippet tem "Text emphasis"
\emph{$1}$0
endsnippet

snippet tbf "Text boldface"
\textbf{$1}$0
endsnippet

snippet sct1 "section" iA 
\section{$1}
$0
endsnippet

snippet sct2 "subsection" iA 
\subsection{$1}
$0
endsnippet

snippet sct3 "subsubsection" iA
\subsubsection{$1}
$0
endsnippet

snippet $ft "footnote" iA
\footnote{$1}$0
endsnippet

# MATH FORMATTING
context "math()"
snippet '((\\[a-zA-Z]+)?(?<!\\)[a-zA-Z](\{(\\[a-zA-Z]+)?[a-zA-Z]\})?)(ddot|dot|vec|hat)' "suffixes" rA
\\`!p snip.rv = match.group(5)`{`!p snip.rv = match.group(1)`}
endsnippet

context "math()"
snippet __ "Subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet ^^ "Superscript" iA
^{$1}$0
endsnippet

snippet \9 "Inline equation" iA
\($1\)$0
endsnippet

snippet '\\\[ ' "Aligned unlabeled equation" rA
\[$1\]$0
endsnippet

snippet eqn "equation" A
\begin{equation}\label{$1}
	$2
\end{equation}
endsnippet

# OPERATIONS

context "math()"
snippet '(^.*)//' "Fraction" wrA
`!p
argument = match.group(1)
i = len(argument) - 1
depth = 0
while i:
	if argument[i] in "}])":
		depth += 1
	elif argument[i] in "{[(":
		depth -= 1
	if depth < 0 or (depth == 0 and argument[i] in ' +-'):
		break
	i -= 1
snip.rv = argument[:i+1] + '\\frac{%s}{' % argument[i+1:]`$1}$0
endsnippet

context "math()"
snippet '(int|oint)' "Integral" r
\\`!p snip.rv = match.group(1)`_{$1}$2\dd{$3}$0
endsnippet

context "math()"
snippet inflim "Infinite limit" iA
\lim_{$1\to\infty}$0
endsnippet

context "math()"
snippet infint "Infinite integral" iA
\int_{-\infty}^{+\infty} $1\dd{$2}$0
endsnippet

context "math()"
snippet $four "Fourier transform" A
\int_{-\infty}^{+\infty} \frac{1}{2\pi\hbar} e^{\frac{i}{\hbar} $1} $2 \dd{$3} $0
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto
endsnippet

context "math()"
snippet '\\(p?dt)' "solo diff" ir
\\`!p snip.rv = match.group(1)`{$1}$0
endsnippet

context "math()"
snippet '\\(p?dv)' "diff in numerator" ir
\\`!p snip.rv = match.group(1)`{$1}{$2}$0
endsnippet

context "math()"
snippet '\\(p?ddv)' "second diff" ir
\\`!p snip.rv = match.group(1)`{$1}{$2}{$3}$0
endsnippet

# PICTURES
snippet pic "picture"
\begin{picture}(${1:size})(${2:offset})
	$3
\end{picture}$0
endsnippet

snippet \put "put"
\put(${1:origin}){${2:content}}
endsnippet

snippet \line "line"
\put(${1:origin}){\line(${2:basis}){${3:scale}}}$0
endsnippet

snippet \circle "circle" 
\put(${1:origin}){\circle(${2:radius})}$0
endsnippet
